# Webアプリケーション開発ガイド

このドキュメントは、バックエンドチームとフロントエンドチームが、それぞれの役割に応じてどのファイルをどのように開発していくかの指針を示すものです。

## 全体的な開発サイクル

Djangoでの機能追加は、基本的に以下のサイクルで行われます。

1.  モデルの定義 (`models.py`): データベースに保存する情報の形を決める。
2.  マイグレーション (`manage.py makemigrations` -> `migrate`): モデルの変更をデータベースに反映させる。
3.  ビューの作成 (`views.py`): ユーザーからのリクエストに対する処理（ロジック）を書く。
4.  URLの設計 (`urls.py`): 新しいページのURLとビューを結びつける。
5.  テンプレートの作成 (`templates/`): ユーザーが見るHTML画面を作る。

---

## ■ バックエンドチーム (担当：平野さん、山田さん、奥山さん)

### 役割
サーバー側で動くアプリケーションのロジック（計算処理、ルール）、データベースの操作、ビジネスロジック全般を担当します。

### 主に開発するファイル

- `main_app/views.py` (最重要ファイル)
  - やること: アプリケーションの頭脳となる部分です。フロントエンドから送られてきたデータに基づき、計算を行ったり、データベースを更新したり、ページに表示するデータを準備したりします。
  - 今回の課題: `home_view`関数内に`TODO`コメントで示されている**ポイント計算ロジック**を、会議で決まった仕様通りに完成させてください。例えば、「3つの質問すべてにチェックが入っていたらボーナスポイントを追加する」などのロジックを実装します。

- `main_app/models.py`
  - **やること**: データベースの設計図です。新しい情報（例：キャラクターのレベル、所持アイテムなど）を保存したくなった場合に、このファイルを編集して新しいカラムやテーブルを追加します。編集後は必ずマイグレーションを行ってください。

- `main_app/forms.py`
  - **やること**: 「今日のエネルギー計測」フォームの定義ファイルです。もし質問項目を増やしたい場合は、まず`models.py`を編集し、次にこのファイルの`fields`リストに追加します。

- `main_app/urls.py`
  - **やること**: 新しいページを追加する際に、そのページのURLと、それに対応する`views.py`内の関数を結びつける設定をここで行います。

---

## ■ フロントエンドチーム (担当：都築さん、谷川さん、髙植さん)
役割
ユーザーが直接触れる部分の見た目（UI）と使いやすさ（UX）全般を担当します。デザインの再現と、快適な操作感の実現がミッションです。

### 主に開発するファイル

- `templates/main_app/` 内の各種 `.html` ファイル (最重要ファイル)**
  - やること: アプリケーションの全ての画面の骨格です。ワイヤーフレームやデザインカンプを基に、HTMLの構造を編集し、CSSが適用しやすいようにクラス名などを付けていきます。
  - 今回の課題:
    1.  バックエンドから渡されたデータ（例: `{{ character.total_points }}`）を使って、情報をページに表示させてください。
    2.  Djangoのテンプレートタグ（例: `{% if record_exists %}`）を使い、条件によって表示内容が変わる部分を実装してください。（例：記録済みの場合はフォームを隠す）
    3.  ひな形の基本的なデザインを、チームで考えた魅力的なデザインに作り変えてください。


###以下は拡張時に行う事
- `static/main_app/style.css`
  - やること: アプリケーションの全てのデザイン（色、フォント、レイアウト、配置など）をこのファイルで定義します。HTMLと連携して、デザインカンプの再現を目指してください。

- (発展) `static/main_app/script.js`
  - やること: もしページを再読み込みせずにキャラクターをアニメーションさせたり、フォームの見た目をリッチにしたりする必要が出てきた場合、このファイルを作成してJavaScriptを記述します。

---

 ■ チーム間の連携方法

このプロジェクトでは、バックエンドとフロントエンドの連携が成功の鍵です。

- **連携の基本**: バックエンドは `views.py` でデータベースから取得したデータを「context」という辞書に詰めてテンプレートに渡します。フロントエンドは、HTML内で `{{ variable }}` のようにしてそのデータを受け取り、画面に表示します。

- **コミュニケーション**:
  - **フロントエンド → バックエンド**: 「このページに、ユーザーのレベルも表示したいので、データを追加してください」といった依頼をします。
  - **バックエンド → フロントエンド**: 「新しいデータとして `character_level` を追加したので、`{{ character.level }}` という名前で使えます」といった連絡をします。

常にコミュニケーションを取りながら、お互いの作業内容を理解し、協力して開発を進めていきましょう。